#!/usr/sbin/nft -f

flush ruleset

# ----- Define Interfaces -----
define DEV_PRIVATE = { usb0, wlan0 }
define DEV_WORLD = { term7.wireguard }
define NET_PRIVATE = { 192.168.77.0/24, 192.168.37.0/24 }

# ----- Global rules for localhost and client traffic -----
table inet global {

    # Create the Fail2ban set
    set f2b-sshd {
        type ipv4_addr
        flags timeout
    }

    # Create the Fail2ban chain that drops packets from IPs in the set
    chain f2b-sshd {
        ip saddr @f2b-sshd drop
    }

    chain inbound_world {
        # Allow ICMP (ping) from the internet, but limit to 3/sec
        ip protocol icmp icmp type echo-request limit rate 3/second accept
    }

    chain inbound_private {
        # Allow ICMP (ping) in the private network, but limit to 3/sec
        ip protocol icmp icmp type { echo-request, echo-reply, destination-unreachable, time-exceeded, parameter-problem } limit rate 3/second accept

        # Protect SSH against brute-force attacks
        limit rate 3/minute tcp dport 6666 accept

        # Allow DHCP, DNS, HTTPS, and SSH for private networks
        ip protocol . th dport vmap {
            tcp . 6666 : accept,    #SSH
            udp . 5357 : accept,    #DNS (ADGUARD)
            tcp . 5357 : accept,
            udp . 67 : accept,      #DHCP
            udp . 68 : accept,
            udp . 123 : accept,     #NTP (LOCAL)
            tcp . 443 : accept      #HTTPS
        }
    }

# ----- Securiy Settings and Redirection to right chain -----
    chain inbound {
        type filter hook input priority 0; policy drop;

        # Check for banned IPs via Fail2ban
        jump f2b-sshd

        # Allow established and related connections, drop invalid ones
        ct state vmap { established : accept, related : accept, invalid : drop }

        # Mitigate SYN flood attacks (max 5 new connections per second with a burst of 10 packets)
        limit rate 5/second burst 10 packets counter tcp flags syn accept

        # Drop NULL packets (used in some DDoS attacks)
        tcp flags & (fin | syn | rst | psh | ack | urg) == 0 drop

        # Drop SYN floods (new connections that aren't SYN)
        tcp flags & (syn|ack) == ack ct state new drop

        # Drop XMAS packets (network scanning)
        tcp flags & (fin | syn | rst | psh | ack | urg) == fin|syn|rst|psh|ack|urg drop

        # Allow loopback & direct packets to the right chain
        iifname vmap {
            lo : accept,
            $DEV_WORLD : jump inbound_world,
            $DEV_PRIVATE : jump inbound_private
        }

        # Log all other TCP connections before rejecting them
        ip protocol tcp log prefix "nft drop: " flags all counter

        # Reject all other TCP connections
        ip protocol tcp reject with tcp reset
    }

# ----- Specific Rules for client traffic: Redirect to AdGuardHome -----
    chain prerouting {
        type nat hook prerouting priority dstnat; policy accept;

        # Redirect USB (usb0) and WiFi (wlan0) client DNS queries to AdGuard on port 5357
        ip protocol udp iifname $DEV_PRIVATE udp dport 53 redirect to 5357
        ip protocol tcp iifname $DEV_PRIVATE tcp dport 53 redirect to 5357
    }

# ----- Forwarding Rules: Allow established/related, drop traffic between interfaces -----
    chain forward {
        type filter hook forward priority 0; policy drop;

        # Allow established connections
        ct state vmap { established : accept, related : accept, invalid : drop }

        # Allow LAN clients (usb0, wlan0) to access the internet via end0 or wlx00c0caae6319
        iifname $DEV_PRIVATE oifname $DEV_WORLD accept

        # Prevent direct traffic between usb0 and wlan0
        iifname usb0 oifname wlan0 drop
        iifname wlan0 oifname usb0 drop
    }

# ----- Masquerading Rules: Allow traffic between local interfaces and internet facing interfaces -----
    chain postrouting {
        type nat hook postrouting priority srcnat; policy accept;

        # Masquerade private network traffic going to the internet
        ip saddr $NET_PRIVATE oifname $DEV_WORLD masquerade
    }
}

# ----- MSS clamp for usb0/wlan0 -> WireGuard (avoid PMTU blackholes) -----
table inet mangle {
    chain fwd_mss {
        type filter hook forward priority mangle; policy accept;

        # Clamp SYN MSS to 1340 when forwarding from private LAN to WireGuard
        iifname { usb0, wlan0 } oifname $DEV_WORLD tcp flags syn tcp option maxseg size set 1340
    }
}

# ----- IPv6: drop all traffic -----
table ip6 filter {
    chain input {
        type filter hook input priority 0; policy drop;
    }
    chain forward {
        type filter hook forward priority 0; policy drop;
    }
    chain output {
        type filter hook output priority 0; policy drop;
    }
}